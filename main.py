#!/usr/bin/env python3
"""
Sistema FDA Automation - Script Principal
Automatiza el proceso completo de login FDA y creaci√≥n de Prior Notice

Sistema migrado con:
- Gesti√≥n autom√°tica de browser (SeleniumManager)
- Sistema de logging avanzado con performance tracking
- Screenshots autom√°ticos en errores
- Rutas configurables para CSV y outputs
- Error handling robusto
- Configuraci√≥n centralizada
"""

import sys
import time
from pathlib import Path
from datetime import datetime
from selenium.webdriver.support.ui import WebDriverWait

# Imports de la nueva arquitectura
from src.constants.timeouts import SleepTimes, ElementTimeouts
from src.constants.messages import LogMessages, UserMessages, ProcessMessages
from src.constants.paths import ensure_directories, show_paths, ORDER_SAMPLE_FILE
from src.core.selenium_manager import SeleniumManager
from src.utils.selenium_helpers import WaitHelper

# Imports del sistema de logging avanzado
from src.core.logger import init_logging, get_logger
from src.core.performance import create_performance_tracker
from src.utils.screenshot_utils import create_screenshot_manager

# Imports del sistema FDA
from src.fda.authentication.fda_login import complete_fda_login
from src.fda.prior_notice.creation.step_01_selection import execute_step_01
from src.fda.prior_notice.creation.step_02_edit_information import execute_step_02
from src.fda.prior_notice.creation.step_03_final_save import execute_step_03

def setup_environment():
    """
    Configura el entorno inicial del sistema con logging mejorado
    """
    logger = get_logger()
    logger.info("üöÄ SISTEMA FDA AUTOMATION INICIADO", module='main')
    
    print("üöÄ SISTEMA FDA AUTOMATION")
    print("=" * 50)
    
    # Mostrar configuraci√≥n actual de rutas
    logger.debug("Mostrando configuraci√≥n de rutas", module='main')
    show_paths()
    
    # Crear directorios necesarios
    logger.debug("Creando directorios del sistema", module='main')
    ensure_directories()
    
    # Verificar archivo CSV
    if not ORDER_SAMPLE_FILE.exists():
        logger.warning(f"Archivo CSV no encontrado: {ORDER_SAMPLE_FILE}", module='main')
        print(f"\n‚ö†Ô∏è ARCHIVO CSV NO ENCONTRADO")
        print(f"üìÅ Se esperaba: {ORDER_SAMPLE_FILE}")
        print(f"üí° El archivo order_sample.csv debe estar en data/samples/")
        print(f"üìã El archivo debe contener: guia_aerea, order_number, shipping_name")
        
        user_continue = input(f"\n{UserMessages.CONTINUE_WITHOUT_CSV}").strip().lower()
        if user_continue not in ['s', 'si', 'yes', 'y']:
            logger.info("Proceso cancelado por el usuario (sin CSV)", module='main')
            print("‚ùå Proceso cancelado por el usuario")
            return False
    else:
        logger.info(f"Archivo CSV encontrado: {ORDER_SAMPLE_FILE}", module='main')
    
    logger.info("‚úÖ Entorno configurado correctamente", module='main')
    print("\n‚úÖ Entorno configurado correctamente")
    return True

def execute_prior_notice_creation(driver, performance_tracker, screenshot_manager):
    """
    Ejecuta el proceso completo de creaci√≥n de Prior Notice con tracking
    """
    logger = get_logger()
    logger.info("üîÑ Iniciando proceso de creaci√≥n de Prior Notice", module='fda')
    
    print(LogMessages.STARTING_PROCESS.format(process="CREACI√ìN DE PRIOR NOTICE"))
    print("=" * 60)
    
    try:
        # PASO 1: Copy Selection
        logger.info("üìã Ejecutando Paso 1: Copy Selection", module='fda')
        print(f"\n{ProcessMessages.STEP_INDICATOR.format(step=1, description='Copy Selection')}")
        
        with performance_tracker.track("fda_step_01_copy_selection"):
            step1_success = execute_step_01(driver, wait=SleepTimes.SHORT_WAIT)
        
        if not step1_success:
            logger.error("‚ùå Fallo en Paso 1 - Copy Selection", module='fda')
            if screenshot_manager:
                screenshot_manager.capture_error_screenshot(driver, "step1_copy_selection_failed")
            print(LogMessages.PROCESS_FAILED.format(process="Paso 1 - Copy Selection"))
            return False
        
        logger.info("‚úÖ Paso 1 completado exitosamente", module='fda')
        if screenshot_manager:
            screenshot_manager.capture_success_screenshot(driver, "step1_copy_selection_completed")
        
        # Pausa entre pasos
        logger.debug(f"‚è∏Ô∏è Pausa entre pasos ({SleepTimes.BETWEEN_STEPS}s)", module='fda')
        print(f"‚è∏Ô∏è Pausa entre pasos...")
        time.sleep(SleepTimes.BETWEEN_STEPS)
        
        # PASO 2: Edit Information
        logger.info("üìù Ejecutando Paso 2: Edit Information", module='fda')
        print(f"\n{ProcessMessages.STEP_INDICATOR.format(step=2, description='Edit Information')}")
        
        with performance_tracker.track("fda_step_02_edit_information"):
            step2_success = execute_step_02(driver, wait=SleepTimes.SHORT_WAIT)
        
        if not step2_success:
            logger.error("‚ùå Fallo en Paso 2 - Edit Information", module='fda')
            if screenshot_manager:
                screenshot_manager.capture_error_screenshot(driver, "step2_edit_information_failed")
            print(LogMessages.PROCESS_FAILED.format(process="Paso 2 - Edit Information"))
            return False
        
        logger.info("‚úÖ Paso 2 completado exitosamente", module='fda')
        if screenshot_manager:
            screenshot_manager.capture_success_screenshot(driver, "step2_edit_information_completed")
        
        # Pausa entre pasos
        logger.debug(f"‚è∏Ô∏è Pausa entre pasos ({SleepTimes.BETWEEN_STEPS}s)", module='fda')
        print(f"‚è∏Ô∏è Pausa entre pasos...")
        time.sleep(SleepTimes.BETWEEN_STEPS)
        
        # PASO 3: Final Save
        logger.info("üíæ Ejecutando Paso 3: Final Save", module='fda')
        print(f"\n{ProcessMessages.STEP_INDICATOR.format(step=3, description='Final Save')}")
        
        with performance_tracker.track("fda_step_03_final_save"):
            step3_success = execute_step_03(driver, wait=SleepTimes.SHORT_WAIT)
        
        if not step3_success:
            logger.error("‚ùå Fallo en Paso 3 - Final Save", module='fda')
            if screenshot_manager:
                screenshot_manager.capture_error_screenshot(driver, "step3_final_save_failed")
            print(LogMessages.PROCESS_FAILED.format(process="Paso 3 - Final Save"))
            return False
        
        logger.info("‚úÖ Paso 3 completado exitosamente", module='fda')
        if screenshot_manager:
            screenshot_manager.capture_success_screenshot(driver, "step3_final_save_completed")
        
        # Proceso completado
        logger.info("üéâ PROCESO DE PRIOR NOTICE COMPLETADO EXITOSAMENTE", module='fda')
        print(f"\nüéâ {LogMessages.PROCESS_COMPLETED.format(process='CREACI√ìN DE PRIOR NOTICE')}")
        print(ProcessMessages.SUCCESS_SUMMARY)
        print("üìä Resumen de lo ejecutado:")
        print("   ‚úÖ Paso 1: Copy Selection completado")
        print("   ‚úÖ Paso 2: Edit Information completado")
        print("   ‚úÖ Paso 3: Final Save completado")
        print("\nüîó El Prior Notice deber√≠a estar listo en FDA")
        
        # Screenshot final de √©xito
        if screenshot_manager:
            screenshot_manager.capture_success_screenshot(driver, "prior_notice_creation_completed")
        
        return True
        
    except KeyboardInterrupt:
        logger.warning("‚èπÔ∏è Proceso interrumpido por el usuario", module='fda')
        print(f"\n‚èπÔ∏è Proceso interrumpido por el usuario")
        return False
    except Exception as e:
        logger.error(f"‚ùå Error inesperado durante la creaci√≥n: {e}", module='fda', exception=e)
        if screenshot_manager:
            screenshot_manager.capture_error_screenshot(driver, "prior_notice_creation_error", e)
        print(f"\n‚ùå Error inesperado durante la creaci√≥n: {e}")
        print("üîç Revisa los logs para m√°s detalles")
        return False

def main():
    """
    Funci√≥n principal del sistema FDA Automation con logging avanzado
    """
    # Generar ID √∫nico para esta sesi√≥n
    session_id = f"fda_automation_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    
    # Inicializar sistema de logging
    logger = init_logging(session_id)
    logger.info("üèóÔ∏è SISTEMA FDA AUTOMATION INICIADO", module='main')
    logger.info(f"Session ID: {session_id}", module='main')
    
    print("üèóÔ∏è SISTEMA FDA AUTOMATION")
    print("Automatizaci√≥n completa: Login + Prior Notice Creation")
    print(f"üîç Session ID: {session_id}")
    print("=" * 60)
    
    # Inicializar sistemas de tracking
    performance_tracker = create_performance_tracker(logger)
    screenshot_manager = create_screenshot_manager(logger)
    
    # Setup del entorno
    if not setup_environment():
        logger.error("‚ùå Error en setup del entorno", module='main')
        print("‚ùå Error en setup del entorno")
        return
    
    # Confirmaci√≥n del usuario
    user_confirm = input(f"\n{UserMessages.START_PROCESS}").strip().lower()
    if user_confirm not in ['s', 'si', 'yes', 'y']:
        logger.info("‚ùå Proceso cancelado por el usuario", module='main')
        print("‚ùå Proceso cancelado por el usuario")
        return
    
    logger.info("‚úÖ Usuario confirm√≥ inicio del proceso", module='main')
    
    try:
        # Usar SeleniumManager para gesti√≥n autom√°tica del driver
        with performance_tracker.track("selenium_initialization"):
            selenium_manager = SeleniumManager()
            driver = selenium_manager.start_driver()
        
        try:
            logger.info("üåê Browser y driver inicializados correctamente", module='selenium')
            print(f"\nüåê {ProcessMessages.BROWSER_READY}")
            
            # FASE 1: Login a FDA
            logger.info("üîê Iniciando proceso de login a FDA", module='fda')
            print(f"\n{ProcessMessages.STEP_INDICATOR.format(step='LOGIN', description='Autenticaci√≥n FDA')}")
            print(f"üîó Navegando a sistema FDA...")
            
            with performance_tracker.track("fda_navigation"):
                driver.get("https://www.access.fda.gov")
                # Screenshot de navegaci√≥n
                if screenshot_manager:
                    screenshot_manager.capture_step_screenshot(driver, "navigation_fda")
            
            # Esperar carga inicial
            with performance_tracker.track("page_load_wait"):
                WaitHelper.wait_for_page_load(driver, ElementTimeouts.PAGE_LOAD)
            
            # Ejecutar login
            with performance_tracker.track("fda_login_process"):
                login_success = complete_fda_login(driver, WebDriverWait(driver, ElementTimeouts.DEFAULT))
            
            if not login_success:
                logger.error("‚ùå Error en el proceso de login", module='fda')
                if screenshot_manager:
                    screenshot_manager.capture_error_screenshot(driver, "fda_login_failed")
                print("‚ùå Error en el proceso de login")
                return
            
            logger.info("‚úÖ Login a FDA completado exitosamente", module='fda')
            if screenshot_manager:
                screenshot_manager.capture_success_screenshot(driver, "fda_login_success")
            print("‚úÖ Login completado exitosamente")
            
            # FASE 2: Creaci√≥n de Prior Notice
            logger.info("üìã Iniciando automatizaci√≥n de Prior Notice", module='fda')
            print(f"\n{ProcessMessages.STEP_INDICATOR.format(step='PRIOR_NOTICE', description='Automatizaci√≥n Prior Notice')}")
            print(f"üí° A partir de aqu√≠, el proceso es mayormente autom√°tico")
            print(f"üë§ Solo necesitar√°s ingresar la fecha cuando se solicite")
            
            # Ejecutar proceso de Prior Notice
            prior_notice_success = execute_prior_notice_creation(driver, performance_tracker, screenshot_manager)
            
            if prior_notice_success:
                logger.info("üéØ PROCESO COMPLETO EXITOSO", module='main')
                print(f"\nüéØ {ProcessMessages.FINAL_SUCCESS}")
                print("üì∏ Se pueden tomar screenshots finales...")
                print("üìÅ Archivos generados en:")
                print(f"   ‚Ä¢ Data: data/")
                print(f"   ‚Ä¢ Outputs: src/orders/output/")
                print(f"   ‚Ä¢ Logs: logs/")
                print(f"   ‚Ä¢ Screenshots: logs/screenshots/")
                
                # Mantener navegador abierto para verificaci√≥n
                input(f"\n{UserMessages.KEEP_BROWSER_OPEN}")
            else:
                logger.error("‚ùå El proceso de Prior Notice no se complet√≥ exitosamente", module='main')
                print(f"\n‚ùå El proceso de Prior Notice no se complet√≥ exitosamente")
                print("üîç Revisa los mensajes anteriores para identificar problemas")
                print("üìÑ Logs detallados disponibles en: logs/")
                print("üì∏ Screenshots de errores disponibles en: logs/screenshots/")
                
                # Mantener navegador para debug
                input("\nüîç Navegador mantenido abierto para debug. Presiona Enter para cerrar...")
        
        finally:
            # Cerrar selenium manager
            if 'selenium_manager' in locals():
                selenium_manager.close_driver()
    
    except KeyboardInterrupt:
        logger.warning("‚èπÔ∏è Proceso interrumpido por el usuario", module='main')
        print(f"\n‚èπÔ∏è Proceso interrumpido por el usuario")
    except Exception as e:
        logger.critical(f"‚ùå Error cr√≠tico en el sistema: {e}", module='main', exception=e)
        print(f"\n‚ùå Error cr√≠tico en el sistema: {e}")
        print("üÜò Revisa la configuraci√≥n del sistema")
        print(f"üí° Revisa la configuraci√≥n en config/secrets.py")
        print("üìÑ Logs detallados en: logs/")
        
        # Screenshot de error cr√≠tico si hay driver disponible
        if 'driver' in locals() and screenshot_manager:
            try:
                screenshot_manager.capture_error_screenshot(driver, "critical_system_error", e)
            except:
                pass
    
    finally:
        # Log final con resumen de la sesi√≥n
        if performance_tracker:
            performance_tracker.log_session_summary()
        
        logger.info("üëã Sistema finalizado", module='main')
        print(f"\nüëã Sistema finalizado")
        print("üí° Tips para pr√≥xima ejecuci√≥n:")
        print("   ‚Ä¢ Aseg√∫rate de tener order.csv actualizado")
        print("   ‚Ä¢ Verifica que FDA no haya cambiado su interfaz")
        print("   ‚Ä¢ Revisa logs/ para an√°lisis detallado")
        print("   ‚Ä¢ Screenshots en logs/screenshots/ para debugging visual")

if __name__ == "__main__":
    main() 