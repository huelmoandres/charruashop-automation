import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))

"""
Herramienta para convertir n√∫meros de orden cortos de Shopify a IDs largos
y exportar pedidos usando n√∫meros cortos
"""

from generate_csv import (
    get_order_id_from_number, 
    get_multiple_order_ids, 
    export_orders_by_short_numbers
)
from src.core.logger import AutomationLogger

# Inicializar logger
logger = AutomationLogger.get_instance()

def demo_conversion():
    """Ejemplo de conversi√≥n de n√∫meros cortos a largos"""
    logger.shopify_logger.info("=== INICIANDO DEMO DE CONVERSI√ìN DE N√öMEROS ===")
    
    print("üéØ DEMO: Conversi√≥n de n√∫meros de orden")
    print("=" * 50)
    
    # Ejemplo: convertir un solo n√∫mero
    print("1Ô∏è‚É£ Conversi√≥n individual:")
    test_number = "1001"
    
    logger.shopify_logger.debug("Convirtiendo n√∫mero individual", extra={"order_number": test_number})
    order_id = get_order_id_from_number(test_number)
    
    if order_id:
        logger.shopify_logger.info("Conversi√≥n individual exitosa", extra={
            "short_number": test_number,
            "long_id": order_id
        })
        print(f"   N√∫mero corto #{test_number} = ID largo: {order_id}")
    else:
        logger.shopify_logger.warning("No se pudo convertir n√∫mero individual", extra={"order_number": test_number})
    
    print("\n2Ô∏è‚É£ Conversi√≥n m√∫ltiple:")
    # Ejemplo: convertir varios n√∫meros
    short_numbers = ["1001", "1002", "1003"]
    
    logger.shopify_logger.info("Iniciando conversi√≥n m√∫ltiple", extra={
        "short_numbers": short_numbers,
        "count": len(short_numbers)
    })
    
    long_ids = get_multiple_order_ids(short_numbers)
    
    print(f"\nüìã Resultados:")
    conversion_results = {}
    for i, short_num in enumerate(short_numbers):
        if i < len(long_ids):
            conversion_results[short_num] = long_ids[i]
            print(f"   #{short_num} -> {long_ids[i]}")
        else:
            conversion_results[short_num] = "No encontrado"
            print(f"   #{short_num} -> No encontrado")
    
    logger.shopify_logger.info("=== DEMO CONVERSI√ìN COMPLETADO ===", extra={
        "conversion_results": conversion_results,
        "successful_conversions": len(long_ids),
        "total_attempts": len(short_numbers)
    })

def export_by_short_numbers_example():
    """Ejemplo de exportaci√≥n usando n√∫meros cortos"""
    logger.shopify_logger.info("=== INICIANDO DEMO DE EXPORTACI√ìN ===")
    
    print("\nüöÄ DEMO: Exportaci√≥n por n√∫meros cortos")
    print("=" * 50)
    
    # Lista de n√∫meros de orden cortos que quieres exportar
    orders_to_export = ["1001", "1002", "1003"]
    
    logger.shopify_logger.info("Ejecutando exportaci√≥n de ejemplo", extra={
        "orders_to_export": orders_to_export,
        "count": len(orders_to_export)
    })
    
    # Exportar directamente usando n√∫meros cortos
    generated_files = export_orders_by_short_numbers(orders_to_export)
    
    if generated_files:
        logger.shopify_logger.info("=== EXPORTACI√ìN DEMO COMPLETADA ===", extra={
            "generated_files": generated_files,
            "files_count": len(generated_files)
        })
        print(f"\n‚úÖ Se generaron {len(generated_files)} archivos CSV")
    else:
        logger.shopify_logger.error("Error en exportaci√≥n demo")
        print("\n‚ùå No se pudieron generar archivos")

def interactive_converter():
    """Conversor interactivo para que el usuario ingrese n√∫meros"""
    logger.shopify_logger.info("=== INICIANDO CONVERSOR INTERACTIVO ===")
    
    print("\nüéØ CONVERSOR INTERACTIVO")
    print("=" * 50)
    print("Ingresa n√∫meros de orden cortos separados por comas")
    print("Ejemplo: 1001, 1002, 1003")
    print("(Presiona Enter sin texto para salir)")
    
    while True:
        user_input = input("\nüìù N√∫meros de orden: ").strip()
        
        if not user_input:
            logger.shopify_logger.info("Usuario sali√≥ del conversor interactivo")
            print("üëã ¬°Hasta luego!")
            break
        
        try:
            # Procesar entrada del usuario
            short_numbers = [num.strip().replace("#", "") for num in user_input.split(",")]
            short_numbers = [num for num in short_numbers if num]  # Filtrar vac√≠os
            
            if not short_numbers:
                logger.shopify_logger.warning("Usuario ingres√≥ n√∫meros inv√°lidos", extra={"user_input": user_input})
                print("‚ö†Ô∏è No se ingresaron n√∫meros v√°lidos")
                continue
            
            logger.shopify_logger.info("Procesando entrada del usuario", extra={
                "raw_input": user_input,
                "processed_numbers": short_numbers,
                "count": len(short_numbers)
            })
            
            print(f"\nüîç Buscando {len(short_numbers)} pedidos...")
            
            # Convertir n√∫meros
            long_ids = get_multiple_order_ids(short_numbers)
            
            if long_ids:
                logger.shopify_logger.info("Conversi√≥n interactiva exitosa", extra={
                    "converted_ids": long_ids,
                    "conversion_count": len(long_ids)
                })
                
                print(f"\n‚úÖ ¬øQuieres exportar estos {len(long_ids)} pedidos a CSV? (s/n)")
                export_choice = input("Respuesta: ").strip().lower()
                
                if export_choice in ['s', 'si', 's√≠', 'y', 'yes']:
                    logger.shopify_logger.info("Usuario eligi√≥ exportar pedidos")
                    print("\nüì¶ Exportando pedidos...")
                    generated_files = export_orders_by_short_numbers(short_numbers)
                    
                    if generated_files:
                        logger.shopify_logger.info("Exportaci√≥n interactiva completada", extra={
                            "generated_files": generated_files,
                            "files_count": len(generated_files)
                        })
                        print(f"\nüéâ ¬°Exportaci√≥n completada! {len(generated_files)} archivos generados")
                    else:
                        logger.shopify_logger.error("Error en exportaci√≥n interactiva")
                        print("\n‚ùå Error en la exportaci√≥n")
                else:
                    logger.shopify_logger.info("Usuario eligi√≥ no exportar")
                    print("üìã Conversi√≥n completada sin exportar")
            else:
                logger.shopify_logger.warning("No se encontraron pedidos v√°lidos en conversi√≥n interactiva", extra={
                    "short_numbers": short_numbers
                })
                print("\n‚ö†Ô∏è No se encontraron pedidos v√°lidos")
                
        except Exception as e:
            logger.shopify_logger.error("Error procesando entrada del usuario", extra={
                "user_input": user_input,
                "error": str(e)
            })
            logger.error_logger.error("Interactive converter error", extra={
                "source_module": "orders_order_converter",
                "function": "interactive_converter",
                "user_input": user_input,
                "error": str(e)
            })
            print(f"‚ùå Error procesando entrada: {e}")

if __name__ == "__main__":
    logger.shopify_logger.info("=== INICIANDO HERRAMIENTA DE CONVERSI√ìN DE PEDIDOS ===")
    
    print("üõ†Ô∏è HERRAMIENTA DE CONVERSI√ìN DE PEDIDOS SHOPIFY")
    print("=" * 60)
    
    # Mostrar demo
    demo_conversion()
    
    # Ejemplo de exportaci√≥n
    export_by_short_numbers_example()
    
    # Modo interactivo
    interactive_converter()
    
    logger.shopify_logger.info("=== HERRAMIENTA DE CONVERSI√ìN FINALIZADA ===") 